# 📘 **Lesson 2: Functions in JavaScript**

---

## ✅ 1. What is a Function?

A **function** is a reusable block of code designed to perform a specific task. Functions help you **avoid repetition** and **organize code better**.

---

## ✅ 2. Declaring a Function

### 🔹 Function Declaration

This is the traditional way to define a function.

```javascript
function greet(name) {
  return `Hello, ${name}!`;
}

console.log(greet("Alice"));
```

**Output:**

```
Hello, Alice!
```

---

## ✅ 3. Function Expression

You can also assign a function to a variable.

```javascript
const add = function(a, b) {
  return a + b;
};

console.log(add(5, 3));
```

**Output:**

```
8
```

📌 **Note:** Function expressions are not hoisted (you cannot call them before they are defined).

---

## ✅ 4. Arrow Functions (ES6)

Arrow functions provide a shorter syntax and automatically bind `this`.

```javascript
const multiply = (x, y) => x * y;

console.log(multiply(4, 2));
```

**Output:**

```
8
```

### 🔸 One Parameter (no parentheses needed):

```javascript
const square = n => n * n;
console.log(square(5)); // 25
```

### 🔸 No Parameters:

```javascript
const sayHi = () => "Hi there!";
console.log(sayHi());
```

---

## ✅ 5. Parameters vs. Arguments

* **Parameters**: variables listed in function definition
* **Arguments**: values passed during function call

```javascript
function subtract(a, b) { // a and b are parameters
  return a - b;
}

console.log(subtract(10, 3)); // 10 and 3 are arguments
```

**Output:**

```
7
```

---

## ✅ 6. Returning Values

You can return values using `return`. If you don’t use `return`, the function returns `undefined`.

```javascript
function double(n) {
  return n * 2;
}

const result = double(6);
console.log(result);
```

**Output:**

```
12
```

---

## ✅ 7. Function Scope

Variables defined inside a function **cannot be accessed outside**.

```javascript
function showSecret() {
  const secret = "12345";
  console.log(secret);
}

showSecret();
// console.log(secret); // ❌ Error: secret is not defined
```

---

## ✅ 8. Default Parameters

You can assign default values to parameters:

```javascript
function greet(name = "Guest") {
  return `Hello, ${name}`;
}

console.log(greet());         // Hello, Guest
console.log(greet("David"));  // Hello, David
```

---

## ✅ 9. Rest Parameters (Gather arguments into an array)

```javascript
function sumAll(...numbers) {
  return numbers.reduce((sum, n) => sum + n, 0);
}

console.log(sumAll(1, 2, 3, 4)); // 10
```

---

## ✅ 10. Callback Functions

You can pass one function into another — this is powerful for **async operations** and event handling.

```javascript
function greetUser(name, callback) {
  const greeting = `Hello, ${name}`;
  callback(greeting);
}

greetUser("Alice", function(msg) {
  console.log(msg);
});
```

**Output:**

```
Hello, Alice
```

---

## 🧠 Summary

| Concept         | Key Info                                |
| --------------- | --------------------------------------- |
| Function Types  | Declaration, Expression, Arrow          |
| Parameters/Args | Parameters = inputs; arguments = values |
| Return          | Use `return` to send back results       |
| Scope           | Function vars are local                 |
| Advanced        | Default params, rest params, callbacks  |

